---
title: "Example of Multiple Nutrient Soil Food Webs"
author: "Robert Buchkowski"
format: 
  revealjs:
    slide-number: true
theme: simple
editor: visual
---

## Model formulation

The multiple nutrient soil food web model makes several important assumptions including:

1.  The system is well mixed.

2.  The measurements of biomass are approximately at equilibrium.

3.  All external inputs or outputs are included in the parameterization (e.g., death rates), except the inputs of basal resources.

4.  All chemical elements included in the model are essential and cannot be substituted.

## Model description

The model is based on a Lotka-Volterra population model between nodes wherein the amount of each element, *k*, is represented for each node in the food web, *X*. The biomass in each node is indexed in units of carbon, so we can use two equations to represent all of the elements in the food web: one for carbon and another repeated for every other element.

## Model equations

$$
\frac{dX_{C,i}}{dt} = \sum_{j} (p_{C,i}a_{C,i,j}F_{i,j}) -d_iX_{C,i} - E_{C,i}X_{C,i} -\sum_j F_{j,i}
$$ {#eq-1}

$$
\begin{align}
\frac{dX_{k,i}}{dt} &= \sum_{j} (a_{k,i,j}p_{k,i}F_{i,j}\frac{Q_{k,j}}{Q_{C,j}}) - d_iX_{C,i}\frac{Q_{k,i}}{Q_{C,i}} \\
  & - E_{k,i}X_{C,i}\frac{Q_{k,i}}{Q_{C,i}} - \frac{Q_{k,i}}{Q_{C,i}}\sum_j F_{j,i}
\end{align}
$$ {#eq-2}

## Parameters

The model contains the following parameters:

::: {.cell}
\begin{array}{|c|l|}
\hline
\textbf{Parameter} & \textbf{Description} \\
\hline
a_{k,i,j} & \text{Assimilation efficiency} \\
p_{k,i} & \text{Production efficiency} \\
Q_{k,i} & \text{Nutrient proportion} \\
F_{k,i,j} & \text{Consumption rate} \\
w_{i,j} & \text{Feeding preferences} \\
d_i & \text{Death rate} \\
E_{k,i} & \text{Excretion} \\
\hline
\end{array}
:::

## Understanding how we use the parameters:

The following graph shows how each parameter in the model is used to calculate the flux through each node. Here $X3$ eats $X1$ and $X2$, while being eaten by $X4$.

::: {.column width="100%"}
```{r}
#| fig-width: 12
#| fig-height: 5
#| fig-align: "center"

library(igraph)

# Define the edges of the network
edges <- c("X1", "X3 gut",
           "X2", "X3 gut",
           "X3 gut", "detritus",
           "X3 gut", "X3 body",
           "X3 body", "detritus",
           "X3 body", "carbon dioxide",
           "X3 body", "X4 gut")

# Create the graph
g <- make_graph(edges = edges, directed = TRUE)

# Make edge labels
edge_labels = c(expression(F[C~1~3]),
                expression(F[C~2~3]),
                expression((1-a[C~1~3])*F[C~1~3]+(1-a[C~2~3])*F[C~2~3]),
                expression(a[C~1~3]*F[C~1~3]+a[C~2~3]*F[C~2~3]),
                expression(d[3]*X[C~3]),
                expression(E[C~3]*X[C~3]),
                expression(F[C~3~4]))

# Set layout for better visualization
layout <- layout_with_kk(g)

# Adjust margins for slide layout
par(mar = c(1, 1, 1, 1))

# Plot the graph
plot(g,
     layout = layout,
     vertex.color = "lightblue",
     vertex.size = 40,
     vertex.label.cex = 1.2,
     vertex.label.color = "black",
     edge.arrow.size = 0.7,
     edge.label = edge_labels,
     edge.label.cex = 1.1,
     edge.label.color = "red",
     edge.width = 2,
     main = "Parameters to fluxes")


```
:::

## Example food web

Let's complete a simple example food web to show how the model calculates flux rates.

```{r}
library(igraph)

# Define edges: isopods eat detritus
edges <- c("detritus","isopod", "fungi", "isopod", "detritus", "fungi")
g <- make_graph(edges = edges, directed = TRUE)

# Define custom layout: isopods on top, detritus on bottom
layout_matrix <- matrix(c(
  -1, 0,   # detritus (bottom left)
   0, 1,   # isopod (top center)
   1, 0.25    # fungi (bottom right)
), ncol = 2, byrow = TRUE)

# Plot the graph
plot(g,
     layout = layout_matrix,
     vertex.color = "lightblue",
     vertex.size = 100,
     vertex.label.cex = 1.5,
     edge.arrow.size = 0.6,
     main = "Isopod-Detritus Network")
```

## Create the interaction matrix

We first need to create the interaction matrix with feeding preferences. This can be done with a simple table of Predator, Prey, Preference. This table also contains assimilation efficiencies for each feeding interaction. The table looks like this.

```{r}
# Create the tibble
interaction_table <- data.frame(
  Predator = c("isopod", "isopod", "fungi"),
  Prey = c("detritus", "fungi", "detritus"),
  Preference = c(1, 1, 1),
  aCarbon = c(0.3, 0.8, 0.8),
  aNitrogen = c(0.25, 0.75, 0.9),
  aPhosphorus = c(0.22, 0.73, 0.91)
)

# Display the tibble
structure(interaction_table)
```

## Create the parameters

Next we need to assemble the parameters for the model (except interactions and assimilation efficiencies). This can be a long list depending on the size of the food web. Again, we can create a table.

```{r}
# Create the tibble
parameter_table <- data.frame(
  ID = c("isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus","isopod","fungi","detritus"),
  Element = c("Carbon", "Carbon", "Carbon", "Nitrogen","Nitrogen","Nitrogen", "Phosphorus","Phosphorus","Phosphorus","Carbon", "Carbon", "Carbon", "Nitrogen","Nitrogen","Nitrogen", "Phosphorus","Phosphorus","Phosphorus","Carbon", "Carbon", "Carbon","Carbon", "Carbon", "Carbon","Carbon", "Carbon", "Carbon","Carbon", "Carbon", "Carbon","Carbon", "Carbon", "Carbon","Carbon", "Carbon", "Carbon"),
  Parameter = c(rep("Q", 9), rep("canIMM", 9), rep("E",3), rep("d",3), rep("B",3),rep("DetritusRecycling",3), rep("isDetritus",3), rep("isPlant",3)),
  Value = c(0.5, 0.5, 0.5, 0.1, 0.1, 0.025, 0.015, 0.01, 0.008, 0,0,0,0,1,0,0,1,0, 0.2, 0.05, 0, 1, 0.2, 0, 5, 20, 100,0,0,1,0,0,1,0,0,0)
)

# Display the tibble
structure(parameter_table)
```

## Assembling the food web

Next we can assemble the food web.

```{r, echo = T}
# Load the package:
library(multnutFW)

# Assemble the food web:
foodweb = build_foodweb(feeding = as.data.frame(interaction_table), properties = as.data.frame(parameter_table))

structure(foodweb)
```

## Calculating flux rates

The package calculates flux rates by first focusing on **Carbon** and then expanding to other nutrients. The `comana` function is adheres to fixed body stoichiometry and does not correct it for nutrient imbalance automatically.

Let's explore how the **Carbon** calculations work.

## Calculating Carbon Fluxes

We can solve for the consumption rates using only the equations for carbon. We define the consumption rates based on the availability of each food item and any preference weights set in the feeding preference matrix. We call these preferences $w_{ij}$. 

To make the notation easier, let's call $F_{i,T} = \sum_j^N{F_{ij}}$ the total consumption rate for each organism. This is the amount consumed *before* any loss to digestive or physiological inefficiency.

This leads to the following equation for each consumption rate.

$$
F_{ij} = \frac{w_{ij}X_j}{\sum_{h=1}^N{w_{ih}X_h}}F_{i,T}
$$


## Calculating Carbon Fluxes (cont.)

To solve the carbon equation, we use the full system of equations and assume that changes over time are zero or $\frac{dX_{C,i}}{dt}=0$. We are solving for total consumption rate of each species $F_{i,T}$.

Starting from equation (1), we solve the following matrix problem $Ax=b$, where $x$ is a vector of total consumption rates for each species, $A$ is a matrix of predation rates, and $b$ is a vector of death rates and respiration rates.

## Calculating Carbon Fluxes (A matrix)


<span style="font-size: 70%;">
$$
A = \begin{pmatrix}
p_{1}(\sum_{j=1}^N\frac{a_{1j}w_{1j}X_j}{\sum_{h=1}^N{w_{1h}X_h}}) - \frac{w_{11}X_1}{\sum_{h=1}^N{w_{1h}X_h}} & ... & - \frac{w_{N1}X_1}{\sum_{h=1}^N{w_{Nh}X_h}} \\
\vdots &  & \vdots \\
- \frac{w_{1N}X_N}{\sum_{h=1}^N{w_{1h}X_h}} & ... & p_{N}(\sum_{j=1}^N\frac{a_{Nj}w_{Nj}X_j}{\sum_{h=1}^N{w_{Nh}X_h}}) - \frac{w_{NN}X_N}{\sum_{h=1}^N{w_{Nh}X_h}} \\
\end{pmatrix}
$$
</span>

## Calculating Carbon Fluxes (b and x vectors)
$$
b = \begin{pmatrix}
d_1X_1 + E_{C,1}X_1 \\
\vdots \\
d_NX_N + E_{C,N}X_N \\
\end{pmatrix}
$$

$$
x = \begin{pmatrix}
\sum_j^N{F_{1j}} \\
\vdots \\
\sum_j^N{F_{Nj}} \\
\end{pmatrix}
$$

## Demonstrate of calculations for our food web

Here are the matrix outputs for each step in the example food web:

A matrix:
```{r}
invisible(trace(multnutFW::comana, quote(print(temp_mat)),at = 12))
output = comana(foodweb)
untrace(comana)
```
B Vector:
```{r}
invisible(trace(multnutFW::comana, quote(print((prop$Carbon$d * prop$Carbon$B + 
        prop$Carbon$E * prop$Carbon$B + prop$Carbon$Ehat * prop$Carbon$B))),at = 12))
output = comana(foodweb)
untrace(comana)
```

## Results of the Carbon calculation:

The solution to $Ax=b$:
```{r, echo = T}
comana(foodweb)$consumption
```
With the feeding preferences, we can convert these total consumption rates into consumption from each food source.
```{r, echo = T}
comana(foodweb)$fmat$Carbon
```

## Calculating the fluxes of other elements:

With knowledge of the carbon flux, we can calculate the flux of all other elements.To simplify our notation, we will call the ratio of carbon to each element $\frac{Q_{C,i}}{Q_{k,i}} = \hat{Q}_{k,i}$. This is fixed in our model.

Since have the fluxes in units of carbon, all we need to do is multiply them by the carbon to element ratio of the node being eaten to get the fluxes for all the other elements. For example:

```{r, echo = T}
comana(foodweb)$fmat$Nitrogen
```

## Calculating the mineralization rates:

Now that we know the consumption of all elements, we can calculate the amount of each element that is available for growth after accounting for assimilation and production efficiencies. This information is used to determine each species mineralization rate $E_{k,i}$ for each element (in units of carbon!).

$$
E_{k,i}X_{C,i} = E_{C,i}X_{C,i} + \sum_{j} (\frac{\hat{Q}_{k,i}}{\hat{Q}_{k,j}}a_{k,i,j}p_{k,i}-a_{C,i,j}p_{C,i})F_{i,j}
$$

## Understanding the nutrients in each food source:

Our mineralization rate formula tells us the nutrient balance for each food source, which we call $\mathfrak{a}_{k,i,j} = \frac{\hat{Q}_{k,i}}{\hat{Q}_{k,j}}a_{k,i,j}p_{k,i}-a_{C,i,j}p_{C,i}$ and save in the results.

```{r, echo = T}
comana(foodweb)$AIJ$Nitrogen
comana(foodweb)$AIJ$Phosphorus
```

## Output mineralization rates:
Using these data, we calculate the net mineralziation rate for each node (in units of that element):
```{r, echo = T}
comana(foodweb)$mineralization
```

## Negative mineralization rates:
These mineralization rates are negative because the animals are not getting enough nutrients and `comana` is not able to adjust their feeding or physiology to balance demand. We do this with other functions. We can:

1. Modify the diet.
1. Increase carbon mineralization (i.e., respiration)

## Diet alteration:
One option is to modify their diet to eat more high nutrient food.
```{r, echo = T}
correct_diet(foodweb)$imat
```
```{r, echo = T}
comana(correct_diet(foodweb))$mineralization
```

## Increased respiration:
Another option is to increase their respiration rate, which we call $\hat{E}$.
```{r, echo = T}
foodweb2 = correct_respiration(foodweb)
foodweb2$prop$general$Carbon
```


## New mineralization rates:
```{r, echo = T}
comana(foodweb2)$mineralization
```

*Note* fungi still have negative nitrogen mineralization, because we flagged them as being able to access inorganic nitrogen using canIMM = 1.
